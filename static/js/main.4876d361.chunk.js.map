{"version":3,"sources":["components/AddTask.js","components/Task.js","components/TaskList.js","components/App.js","serviceWorker.js","index.js"],"names":["AddTask","minDate","Date","toISOString","slice","state","text","checked","date","handleText","e","setState","target","value","handleCheckbox","handleDate","handleClick","length","props","add","alert","maxDate","this","className","type","placeholder","onChange","id","htmlFor","min","max","onClick","Component","Task","task","active","important","finishDate","style","color","fontSize","change","delete","finish","toLocaleString","TaskList","tasks","filter","done","sort","a","b","toLowerCase","activeTasks","map","key","doneTasks","App","counter","deleteTask","changeTaskStatus","Array","from","forEach","getTime","addTask","prevState","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4876d361.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./AddTask.css\";\r\nclass AddTask extends Component {\r\n  minDate = new Date().toISOString().slice(0, 10);\r\n  state = {\r\n    text: \"\",\r\n    checked: false,\r\n    date: this.minDate\r\n  };\r\n\r\n  handleText = e => {\r\n    this.setState({\r\n      text: e.target.value\r\n    });\r\n  };\r\n  handleCheckbox = e => {\r\n    this.setState({\r\n      checked: e.target.checked\r\n    });\r\n  };\r\n\r\n  handleDate = e => {\r\n    this.setState({\r\n      date: e.target.value\r\n    });\r\n  };\r\n\r\n  handleClick = () => {\r\n    // console.log(\"klik\");\r\n    \r\n    const { text, checked, date } = this.state;\r\n    if(text.length > 2) {\r\n      const add = this.props.add(text, date, checked);\r\n    if (add) {\r\n      this.setState({\r\n        text: \"\",\r\n        checked: false,\r\n        date: this.minDate\r\n    });\r\n    }\r\n  } else{\r\n    alert(\"zbyt krótka nazwa !\")\r\n  }\r\n  };\r\n\r\n  handletex;\r\n  render() {\r\n    let maxDate = this.minDate.slice(0, 4) * 1 + 1;\r\n    maxDate = maxDate + \"-12-31\";\r\n    // console.log(maxDate)\r\n    return (\r\n      <div className=\"form\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"dodaj zadanie\"\r\n          value={this.state.text}\r\n          onChange={this.handleText}\r\n        />\r\n        <input\r\n          type=\"checkbox\"\r\n          checked={this.state.checked}\r\n          id=\"important\"\r\n          onChange={this.handleCheckbox}\r\n        />\r\n        <label htmlFor=\"important\">Ważne !</label>\r\n        <br />\r\n        <label htmlFor=\"date\">Czas na zrobienie:</label>\r\n        <input\r\n          type=\"date\"\r\n          value={this.state.date}\r\n          min={this.minDate}\r\n          max={maxDate}\r\n          onChange={this.handleDate}\r\n        />\r\n        <br />\r\n        <button onClick={this.handleClick}>Dodaj</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddTask;\r\n","import React from \"react\";\r\n\r\nconst Task = props => {\r\n\r\nconst style = {\r\n    color: 'red', \r\n    fontSize: '15px',\r\n}\r\n\r\n  const { text, date,id,active,important,finishDate } = props.task;\r\n\r\nif(active) {\r\n\r\n  return (\r\n    <div>\r\n      <p>\r\n        <strong style={important ? style : null }>{text}</strong> do <span>{date} </span>\r\n        <button onClick={()=>props.change(id)}>Zostało zrobione</button>\r\n        <button onClick={()=>props.delete(id)}>X</button>\r\n      </p>\r\n    </div>\r\n  );\r\n}else {\r\n\r\nconst finish = new Date(finishDate).toLocaleString()\r\n\r\n    return (\r\n        <div>\r\n             <p>\r\n        <strong>{text}</strong> do <em> (Wykonać do: {date}) </em>\r\n     <br/>\r\n     - wykonano dnia: <span>{finish}</span>\r\n        <button onClick={()=>props.delete(id)}>X</button>\r\n      </p>\r\n        </div>\r\n    )\r\n}\r\n};\r\n\r\nexport default Task;\r\n","import React from \"react\";\r\nimport Task from \"./Task\";\r\n\r\nconst TaskList = props => {\r\n  const active = props.tasks.filter(task => task.active);\r\n\r\n  const done = props.tasks.filter(task => !task.active);\r\n\r\n  // done.sort((a,b)=> b.finishDate - a.finishDate)\r\n  // console.log(active);\r\n  if (done.length >= 2) {\r\n    done.sort((a, b) => {\r\n      if (a.finishDate > b.finishDate) {\r\n        return 1;\r\n      }\r\n      if (a.finishDate < b.finishDate) {\r\n        return -1;\r\n      }\r\n      return 0;\r\n    });\r\n  }\r\n\r\n  if (active.length >= 2) {\r\n    active.sort((a, b) => {\r\n      a = a.text.toLowerCase();\r\n      b = b.text.toLowerCase();\r\n      if (a < b) return -1;\r\n      if (a > b) return 1;\r\n      return 0;\r\n    });\r\n  }\r\n\r\n  const activeTasks = active.map(task => (\r\n    <Task\r\n      key={task.id}\r\n      task={task}\r\n      delete={props.delete}\r\n      change={props.change}\r\n    />\r\n  ));\r\n\r\n  const doneTasks = done.map(task => (\r\n    <Task\r\n      key={task.id}\r\n      task={task}\r\n      delete={props.delete}\r\n      change={props.change}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <>\r\n      <div className=\"active\">\r\n        <h1>Zadania do zrobienia:</h1>\r\n        {activeTasks.length > 0 ? activeTasks : <p>Brak zadań</p>}\r\n      </div>\r\n      <hr />\r\n      <div className=\"done\">\r\n        <h3>\r\n          Zadania zrobnione <em>({done.length})</em>:\r\n        </h3>\r\n        {done.length >= 5 && (\r\n          <span style={{ fontSize: \"12px\" }}>\r\n            Wyświetlone jest pięć ostatnich elementów\r\n          </span>\r\n        )}\r\n        {doneTasks.slice(0, 5)}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TaskList;\r\n","import React from \"react\";\n// import logo from './logo.svg';\nimport \"./App.css\";\nimport AddTask from \"./AddTask\";\nimport TaskList from \"./TaskList\";\n\nclass App extends React.Component {\n  counter = 0;\n  state = {\n    tasks: []\n  };\n\n  deleteTask = id => {\n    // console.log(\"del w App  \" + id);\n    // const tasks = [...this.state.tasks];\n\n    // const index = tasks.findIndex(task => task.id === id);\n    // tasks.splice(index,1)\n\n    // this.setState({\n    //   tasks\n    // })\n\n    let tasks = [...this.state.tasks];\n    tasks = tasks.filter(task => task.id !== id);\n    this.setState({\n      tasks\n    });\n  };\n\n  changeTaskStatus = id => {\n    // console.log(\"change w App  \" + id);\n\n    let tasks = Array.from(this.state.tasks);\n    tasks.forEach(task => {\n      if (task.id === id) {\n        task.active = false;\n        task.finishDate = new Date().getTime();\n      }\n    });\n    this.setState({\n      tasks\n    });\n  };\n  addTask = (text,date,important) => {\n    // console.log(\"dodany\");\n    const task = {\n      id: this.counter,\n      text,\n      date,\n      important: important,\n      active: true,\n      finishDate: null\n    };\n    this.counter++;\n    // console.log(task,this.counter)\n    this.setState(prevState => ({\n      tasks:[...prevState.tasks,task]\n    }))\n    return true;\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1> Do zrobienia! </h1> <AddTask add={this.addTask} />{\" \"}\n        <TaskList\n          tasks={this.state.tasks}\n          delete={this.deleteTask}\n          change={this.changeTaskStatus}\n        />{\" \"}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}